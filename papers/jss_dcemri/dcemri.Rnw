\documentclass[article,shortnames]{jss}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% declarations for jss.cls %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\usepackage{amsmath}

\newcommand{\ktrans}{K^\text{trans}}
\newcommand{\iaugc}[1]{\text{IAUGC}_{#1}}
\newcommand{\kep}{k_\text{ep}}
\newcommand{\vp}{v_\text{p}}
\newcommand{\TR}{\mathop{\text{TR}}\nolimits}

%% almost as usual
\author{Brandon Whitcher\\GlaxoSmithKline \And 
        Volker J. Schmid\\Ludwig-Maximilians Universit\"at M\"unchen}
\title{Quantitative Analysis of Dynamic Contrast-Enhanced and Diffusion-Weighted Magnetic Resonance Imaging for Oncology Studies in \proglang{R}}

%% for pretty printing and a nice hypersummary also set:
\Plainauthor{Brandon Whitcher, Volker Schmid} %% comma-separated
\Plaintitle{Quantitative Analysis of Dynamic Contrast-Enhanced and Diffusion-Weighted Magnetic Resonance Imaging for Oncology Studies in R} %% without formatting
\Shorttitle{DCE-MRI and DW-MRI in \proglang{R}} %% a short title (if necessary)

%% an abstract and keywords
\Abstract{
  The abstract of the article.
}
\Keywords{contrast, \pkg{dcemriS4}, diffusion, dynamic, enhanced, imaging, magnetic, resonance}
\Plainkeywords{contrast, dcemriS4, diffusion, dynamic, enhanced, imaging, magnetic, resonance} %% without formatting
%% at least one keyword must be supplied

%% publication information
%% NOTE: Typically, this can be left commented and will be filled out by the technical editor
%% \Volume{13}
%% \Issue{9}
%% \Month{September}
%% \Year{2004}
%% \Submitdate{2004-09-29}
%% \Acceptdate{2004-09-29}

%% The address of (at least) one author should be given
%% in the following format:
\Address{
  Brandon Whitcher\\
  GlaxoSmithKline\\
  Clinical Imaging Centre\\
  Hammersmith Hospital\\
  Du Cane Road\\
  London W12 0HS, United Kingdom\\
  E-mail: \email{bjw34032@users.sourceforge.net}\\
  URL: \url{http://www.dcemri.org/}\\
  
  Volker J. Schmid\\
  Bioimaging group\\
  Department of Statistics\\
  Ludwig-Maximilians Universit\"at M\"unchen\\
  E-mail: \email{volker.schmid@lmu.de}\\
  URL: \url{http://volkerschmid.de}
}
%% It is also possible to add a telephone and fax number
%% before the e-mail in the following format:
%% Telephone: +43/1/31336-5053
%% Fax: +43/1/31336-734

%% for those who use Sweave please include the following line (with % symbols):
%% need no \usepackage{Sweave.sty}

%% end of declarations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<preliminaries,echo=FALSE,results=hide>>=
library("oro.dicom")
library("XML")
library("oro.nifti")
library("dcemriS4")
library("bitops")
library("minpack.lm")
library("splines")
options(prompt="R> ")
options(width=76)
@

\begin{document}

%% include your article here, just as usual
%% Note that you should use the \pkg{}, \proglang{} and \code{} commands.

\section[Introduction]{Introduction}
%% Note: If there is markup in \(sub)section, then it has to be escape as above.

Quantitative analysis of perfusion imaging using dynamic
contrast-enhanced MRI (DCE-MRI) is achieved through a series of
processing steps, starting with the raw data acquired from the MRI
scanner, and involves a combination of physics, mathematics,
engineering and statistics to produce a set of statistical images
based on parameter estimates from a compartmental model.  The purpose
of the \pkg{dcemriS4} package is to provide the user with a collection
of functions and subroutines that move experimental data through all
steps of the data analysis pipeline, using standard data formats (such
as Analyze or NIfTI) that may be visualized and manipulated in
\proglang{R} and exported for accessibility across a wide variety of
medical image analysis software packages.

The S4 designation in \pkg{dcemriS4} means that S4 object classes are
used throughout to ensure efficient and transparent manipulation of
Analyze or NIfTI data structures.  Data input and output rely upon the
\pkg{oro.nifti} package \citep{oro.nifti}, where both Analyze and
NIfTI data are represented in S4 classes.  Parameter estimates in
\pkg{dcemriS4} inherit attributes from the incoming Analyze/NIfTI
objects in order to preserve anatomical and physiological information
for appropriate visualization in \proglang{R} or other software
packages.  All functions for parameter estimation may also be applied
to aggregated data; i.e., a mean curve across an anatomical region of
interest.  However, the methodolgoy presented here is intended to be
applied on a voxel-by-voxel basis to the Analyze or NIfTI objects and
all statistical summaries are output as valid NIfTI objects to
facilitate interoperability.  As voxel-wise quantitative analysis can
be time consuming, \pkg{dcemriS4} supports basic parallel computing by
incorprating the \pkg{multicore} package \citep{multicore}.
Computations are easily parallelized with the variable
\code{multicore=TRUE} in most computationally intense functions.

While initial application of DCE-MRI was in the characterization of
blood-brain barrier (BBB) integrity
\citep{tof-ker:measurement,lar-etal:quantitation,lar-tof:measurement},
we will instead focus on the application of DCE-MRI for the
quantitative analysis of tumor perfusion in oncology.  The interested
reader will find several chapters in \citet{jac-buc-par:dce-mri} and
\citet{tof:book} pertaining to the scientific background, methodology
and application of DCE-MRI.

[{\bf Diffusion Weighted Imaging}]

Diffusion weighted imaging (DWI) is under rapid development as an
oncology imaging biomarker \citep{che-etal:diffusion,koh-col:DW-MRI}.

\section[]{Dynamic Contrast-enhanced Magnetic Resonance Imaging}

\textbf{OUTLINE HIGH-LEVEL OVERVIEW OF DCE-MRI ACQUISITION}

\subsection[]{T1 Relaxation Rate and Contrast Agent Concentration}

Estimation of the tissue T1 relaxation rate is the first step in
converting signal intensity, obtained in the dynamic acquisition of
the DCE-MRI protocol, to contrast agent concentration.  The subsequent
steps provided here focus on pharmacokinetic modeling and assume one
has converted the raw scanner data to contrast agent concentration.
Please see \cite{col-pad:ieee} for a discussion on this point.

Multiple flip-angle acquisitions are commonly used to estimate the
intrinsic relaxation rate maps $\{m_0,R_{10}\}$ of the tissue, the
stated non-linear equation
\begin{equation}
  S(\theta) = \frac{m_0 \sin(\theta) (1 - E_{10})} {1 - \cos(\theta)
    E_{10}},\label{eqn:signal}
\end{equation}
where $E_{10}=\exp(-\TR{\cdot}R_{10})$, relates the observed signal
intensity $S(\cdot)$ with the parameters of interest when varying the
flip angle $\theta$.  Note, the transverse relaxation time of
$\TR\approx4$~ms is common for clinical acquisitions in practice.  The
Levenberg-Marquardt (LM) algorithm, provided in \pkg{minpack.lm}
\citep{minpack.lm}, is applied to estimate the parameters; see the
discussion by \cite{ahe-etal:levenburg-marquardt}.  It is worthwhile
to consult known T1 values $(T_{10}=1/R_{10})$ for different tissue
types to ensure the parameter estimates obtained are sensible.

Estimation of the post-injection longitudinal relaxation rate $R_1(t)$
using the signal intensity from pre- and post-contrast acquisitions is
performed via
\begin{eqnarray}
  A(t) & = & \frac{S(t) - S(0)}{m_0\sin(\theta)}\\
  B & = & \frac{1 - E_{10}}{1 - \cos(\theta) E_{10}}\\
  R_1(t) & = & -\frac{1}{\TR} \cdot \ln\left\{\frac{1 - [A(t)+B]}{1
    - \cos(\theta)[A(t) + B]}\right\},
\end{eqnarray}
where $\theta\in[10^\circ,30^\circ]$ is common for clinical
acquisitions and depends on both the field strength of the magnet and
the anatomy of interest.

% There are a myriad of techniques to quantify T1 using MRI.  Currently
% curve-fitting methods for two popular acquisition schemes are
% available
% \begin{itemize}
% \item Inversion recovery (\url{www.e-mri.org/mri-sequences/inversion-recovery-stir-flair.html})
% \item Multiple flip angles \citep{par-pad:DCE-MRI}
% \end{itemize}
% Once the tissue T1 relaxation rate has been estimated, the dynamic
% acquisition is then converted to contrast agent concentration.  Note,
% the B1 field is assumed to be constant (and accurate) when using
% multiple flip angles to estimate T1.  At higher fields strengths
% (e.g., 3T) the B1 field should be estimated in order to correct the
% prescribed flip angles.

%\subsection{Contrast Agent Concentration}

The function \code{R1.fast} (embedded within \code{CA.fast})
rearranges the multi-dimensional structure of the multiple flip-angle
acquisitions into a single matrix, to take advantage of internal
\proglang{R} functions instead of loops, and calls \code{E10.lm} to
perform the non-linear regression using the LM algorithm.  The final
step o fthe conversion of the dynamic signal intensities to contrast
agent concentration, using the \code{CA.fast} function, is performed
via
\begin{equation}\label{eqn:conc}
  C_t(t) = \frac{1}{r_1}\left(\frac{1}{T_1} - \frac{1}{T_{10}}\right),
\end{equation}
where $r_1$ is the spin-lattice relaxivity constant (depends on the
gadolinium chelate and magnet field strength) and $T_{10}=1/R_{10}$ is
the spin-lattice relaxation time in the absence of contrast media
\citep{buc-par:measuring}.  For computational reasons we follow the
method of \cite{li-etal:improved}.

\subsection[]{Motion Correction and Co-registration}

Basic motion correction within an acquisition, and co-registration
between acquired series, is available using the \code{ftm} function
for fast template matching \citep{lew:template-matching}.  A reference
volume must be pre-specified where a mask has been applied to remove
all voxels that should not be included in the algorithm.  Note, only
three-dimensional translations are allowed and no interpolation is
used (i.e., only whole-voxel translations) at this time.  More
sophisticated image registration methodology in \proglang{R} is being
developed in the \pkg{RNiftyReg} package \citep{RNiftyReg}.  Access to
the image registration routines from the Insight Toolkit (ITK,
\url{http://www.ikg.org}) is highly desirable and currently under
negotiation.

\subsection{B1 Mapping Via the Saturated Double-Angle Method}

For \emph{in vivo} MRI at high field ($\geq{3}\text{Tesla}$) it is
essential to consider the homogeneity of the active B1 field (B1+).
The B1+ field is the transverse, circularly polarized component of B1
that is rotating in the same sense as the magnetization.  When
exciting large collections of spins, non-uniformity in B1+ results in
nonuniform treatment of spins.  This leads to a spatially varying
signal and contrast, and to difficulty in image interpretation and
quantification \citep{cun-pau-nay:saturated}.

The proposed method uses an adaptation of the double angle method
(DAM).  Such methods allow calculation of a flip-angle map, which is
an indirect measure of the B1+ field.  Two images are acquired: $I_1$
with prescribed angle $\alpha_1$ and $I_2$ with prescribed angle
$\alpha_2=2\alpha_1$.  All other signal-affecting sequence parameters
are kept constant.  For each voxel, the ratio of magnitude images
satisfies
\begin{equation}
  \frac{I_2(r)}{I_1(r)} = \frac{\sin\alpha_2(r)f_2(T_1,\text{TR})}
       {\sin\alpha_1(r)f_1(T_1,\text{TR})}
\end{equation}
where $r$ represents spatial position and $\alpha_1(r)$ and
$\alpha_2(r)$ are flip angles that vary with the spatially varying B1+
field.  If the effects of $T_1$ and $T_2$ relaxation can be neglected,
then the actual flip angles as a function of spatial position satisfy
\begin{equation}
  \alpha(r) = \text{arccos}\left(\left|\frac{I_2(r)}{2I_1(r)}\right|\right)
\end{equation}
A long repetition time ($\text{TR}\leq{5T_1}$) is typically used with
double-angle methods so that there is no $T_1$ dependence in either
$I_1$ or $I_2$; i.e., $f_1(T_1,\text{TR})=f_2(T_1,\text{TR})=1.0$.
Instead, the proposed method includes a magnetization-reset sequence
after each data acquisition with the goal of putting the spin
population in the same state regardless of whether the or $\alpha_2$
excitation was used for the preceding acquisition.

\subsubsection{Example using Phantom Data}

Using data acquired from a T1 phantom at two flip angles,
$\alpha_1=60^\circ$ and $\alpha_2=120^\circ$, we compute the
multiplicative factor relative to the low flip angle using the
saturated double-angle method \citep{cun-pau-nay:saturated}.  Note,
repeat acquisitions (five) of each flip angle were obtained and force
the additional \code{rowMeans} step to average the results from the
function \code{dam} (double-angle method) in the code below.
  
<<doubleanglemethod>>=
f60 <- file.path("nifti", "SDAM_ep2d_60deg_26slc.nii.gz")
sdam60 <- readNIfTI(system.file(f60, package="dcemriS4"))
f120 <- file.path("nifti", "SDAM_ep2d_120deg_26slc.nii.gz")
sdam120 <- readNIfTI(system.file(f120, package="dcemriS4"))
sdam.image <- rowMeans(dam(sdam60, sdam120, 60), dims=3)
mask <- (rowSums(sdam60, dims=3) > 500)
@ 
<<figure5-png,echo=FALSE,results=hide>>=
png("sdam.png", width=400, height=400)
@ 
<<figure5-code>>=
# A smooth version of "sdam.image"
fsmooth <- file.path("nifti", "SDAM_smooth.nii.gz")
SDAM <- readNIfTI(system.file(fsmooth, package="dcemriS4"))
overlay(sdam120, ifelse(mask, SDAM, NA), z=13, zlim.x=range(sdam120), 
        zlim.y=c(0.5,1.5), plot.type="single")
@ 
<<figure5-dev.off,echo=FALSE,results=hide>>=
dev.off()
@ 

Isotropic smoothing should be applied before using this field to
modify flip angles associated with additional acquisitions; e.g., in
the \pkg{AnalyzeFMRI} package \citep{AnalyzeFMRI}.
Figure~\ref{fig:sdam+t1-phantom}a is the estimated B1+ field (with
isotropic Gaussian smoothing) for a gel-based phantom containing a
variety of T1 relaxation times.  The center of the phantom exhibits a
flip angle $>60^\circ$ while the flip angle rapidly becomes
$<60^\circ$ when moving away from the center in either the $x$, $y$ or
$z$ dimensions.
  
\begin{figure}[!htbp]
  \begin{minipage}[b]{0.5\linewidth}
    \centering
    \includegraphics*[scale=1]{sdam.png}\\
    \textbf{(a)}
  \end{minipage}
  \hspace{0.5cm}
  \begin{minipage}[b]{0.5\linewidth}
    \centering
    \includegraphics*[scale=1]{t1_phantom.png}\\
    \textbf{(b)}
  \end{minipage}
  \caption{\textbf{(a)} Estimated B1+ field (with isotropic Gaussian
    smoothing) using the saturated double-angle method.  The colors
    correspond to a multiplicative factor relative to the true flip
    angle ($60^\circ$).  \textbf{(b)} Estimated T1 relaxation rates
    for the phantom data acquisition.  The colors range from 0-2.5
    seconds.}
  \label{fig:sdam+t1-phantom}
\end{figure}

%\begin{figure}[!htbp]
%  \centering
%  \includegraphics
%  \caption{Estimated B1+ field (with isotropic Gaussian smoothing)
%    using the saturated double-angle method.  The colors correspond to
%    a multiplicative factor relative to the true flip angle
%    ($60^\circ$).}
%  \label{fig:sdam}
%\end{figure}
%\begin{figure}[!htbp]
%  \centering
%  \includegraphics
%  \caption{Estimated T1 relaxation rates for the phantom data
%  acquisition.  The colors range from 0-2.5 seconds.}
%  \label{fig:t1-phantom}
%\end{figure}

Assuming the smoothed version of the B1+ field has been computed (in
the \code{SDAM} object here), multiple flip-angle acquisitions can be
used to estimate the T1 relaxation rate from the subject (or phantom).
The multiplicative factor, derived from the saturated double-angle
method, is used to produce a spatially-varying flip-angle map and
input into the function \code{R1.fast}.

<<t1estimation>>=
alpha <- c(5,10,20,25,15)
nangles <- length(alpha)
fnames <- file.path("nifti", paste("fl3d_vibe-", alpha, "deg.nii.gz", sep=""))
X <- Y <- 64
Z <- 36
flip <- fangles <- array(0, c(X,Y,Z,nangles))
for (w in 1:nangles) {
  vibe <- readNIfTI(system.file(fnames[w], package="dcemriS4"))
  flip[,,1:nsli(vibe),w] <- vibe
  fangles[,,,w] <- array(alpha[w], c(X,Y,Z))
}
TR <- 4.22 / 1000 # in seconds
fanglesB1 <- fangles * array(SDAM, c(X,Y,Z,nangles))
zi <- 13
maskzi <- mask
maskzi[,,(! 1:Z %in% zi)] <- FALSE
R1 <- R1.fast(flip, maskzi, fanglesB1, TR, verbose=TRUE)
@ 
<<figure6-png,echo=FALSE,results=hide>>=
png("t1_phantom.png", width=400, height=400)
@ 
<<figure6-code>>=
overlay(vibe, 1/R1$R10[,,1:nsli(vibe)], z=13, zlim.x=c(0,1024), 
        zlim.y=c(0,2.5), plot.type="single")
@ 
<<figure6-dev.off,echo=FALSE,results=hide>>=
dev.off()
@

Figure~\ref{fig:sdam+t1-phantom}b displays the quantitative T1 map for
a gel-based phantom using information from the estimated B1+ field.
By defining regions of interest (ROIs) in

<<FSLmask>>=
fpmask <- file.path("nifti", "t1_phantom_mask.nii.gz")
t1pmask <- readNIfTI(system.file(fpmask, package="dcemriS4"))
pmask <- nifti(array(t1pmask[,,25], dim(t1pmask))) # repeat slice #25
@ 

\begin{figure}[!htbp]
\begin{center}
<<figure7,fig=TRUE,echo=TRUE>>=
T1 <- c(.484,.350,1.07,.648,.456,1.07,.660,1.543,1.543,.353)
par(mfrow=c(1,1), mar=c(5,4,4,2)+.1)
boxplot(split(1/drop(R1$R10), as.factor(drop(pmask)))[-1], 
        ylim=c(0,2.5), xlab="Region of Interest", ylab="T1 (seconds)")
points(1:10, T1, col=rainbow(10), pch=16, cex=2)
@ 
\end{center}
\caption{Boxplots of the estimated T1 values for the gel-based
  phantom, grouped by user-specified regions of interest.  True T1
  values are plotted as colored circles for each distinct ROI.}
\label{fig:t1-phantom-boxplot}
\end{figure}

We may compare the ``true'' T1 values for each ROI with those obtained
from acquiring multiple flip angles with the application of B1+
mapping.  Figure~\ref{fig:t1-phantom-boxplot} compares T1 estimates in
the 10 ROIs, defined by \code{pmask}, with the true T1 values (large
circles).  The first seven ROIs correspond to the cylinders that run
around and through the phantom, clockwise starting from approximately
one o'clock.  The eighth and ninth ROIs are taken from the main
compartment in the gel phantom; ROI~\#8 is drawn in the middle of the
phantom while ROI~\#9 is drawn from the outside of the phantom.  The
final ROI is taken from the central cylinder embedded in the phantom.

\subsection{Arterial Input Function}

Whereas quantitative PET studies routinely perform arterial
cannulation on the subject in order to characterize the arterial input
function (AIF) directly, it has been common to use literature-based
AIFs in the quantitative analysis of DCE-MRI.  Examples include
\begin{equation}
  C_p(t) = D \left( a_1 e^{-m_1t} + a_2 e^{-m_2t} \right),
\end{equation}
where $D=0.1\,\text{mmol/kg}$, $a_1=3.99\,\text{kg/l}$,
$a_2=4.78\,\text{kg/l}$, $m_1=0.144\,\text{min}^{-1}$ and
$m_2=0.0111\,\text{min}^{-1}$
\citep{wei-lan-mut:pharmacokinetics,tof-ker:measurement}; or
$D=1.0\,\text{mmol/kg}$, $a_1=2.4\,\text{kg/l}$,
$a_2=0.62\,\text{kg/l}$, $m_1=3.0$ and $m_2=0.016$
\citep{fri-etal:measurement}.  There has been progress in measuring
the AIF using the dynamic acquisition and fitting a parametric model
to the observed contrast agent concentation time curves.  Recent
models include a mixture of Gaussians \citep{par-etal:derived} and
sums of exponentials \citep{ort-etal:efficient}.  The \pkg{dcemriS4}
package has incorporated the sums-of-exponentials model
\begin{equation}\label{eqn:orton}
  C_p(t) = A_B t e^{-\mu_Bt} + A_G \left(e^{-\mu_Gt} + e^{-\mu_Bt}\right)
\end{equation}
\citep{ort-etal:efficient}, where the unknown parameters
$\beta=(A_B,\mu_B,A_G,\mu_G)$ are estimated using nonlinear
regression.  Using the AIF defined in \cite{buc:uncertainty}, we
illustrate fitting a parametric model to characterize observed data.
The \code{orton.exp.lm} function provides this capability using the
so-called double-exponential parametric form \code{orton.exp}
\eqref{eqn:orton}.

<<buckley.aif>>=
data("buckley")
aifparams <- with(buckley, orton.exp.lm(time.min, input))
fit.aif <- with(aifparams, aif.orton.exp(buckley$time.min, AB, muB, AG, muG))
@
\begin{figure}[!htbp]
\begin{center}
<<figure8,fig=TRUE,echo=TRUE>>=
with(buckley, plot(time.min, input, type="l", lwd=2, xlab="Time (minutes)", 
                   ylab=""))
with(buckley, lines(time.min, fit.aif, lwd=2, col=2))
legend("topright", c("Simulated AIF", "Estimated AIF"), lwd=2, col=1:2, 
       bty="n")
@ 
\end{center}
\caption{Arterial input function (AIF) from \cite{buc:uncertainty} and
  the best parametric fit, using the exponential model from
  \cite{ort-etal:efficient}.}
\label{fig:fitted-aif}
\end{figure}

Figure~\ref{fig:fitted-aif} shows both the true AIF and the best
parametric description using a least-squares fitting criterion.

\subsection[]{Kinetic Parameter Estimation}

The standard Kety model \citep{ket:blood-tissue}, a single-compartment
model, or the extended Kety model, the standard Kety model with an
extra ``vascular'' term, form the collection of basic parametric
models one can apply using \pkg{dcemriS4}.  Regardless of which
parametric model is chosen for the biological system, the contrast
agent concentration time curve at each voxel in the region of interest
(ROI) is approximated using the convolution of an arterial input
function (AIF) and the compartmental model; i.e.,
\begin{eqnarray}
  C_t(t) &=& \ktrans \left[ C_p(t) \otimes e^{-\kep t}
    \right], \label{eqn:kety}\\
  C_t(t) &=& \vp C_p(t) + \ktrans \left[ C_p(t) \otimes e^{-\kep t}
    \right]. \label{eqn:extendedkety}
\end{eqnarray}
The $\ktrans$ parameter represents the volume transfer constant
between the plasma and the extracellular extravascular space (EES) per
minute, and $\kep$ is the rate constant between EES and blood plasma.
The parameter $\vp$ describes the fraction of conrast agent in the
plasma, while $v_e=\ktrans/\kep$ is the fraction of the contrast agent
in the EES.

Parameter estimation may be performed using one of three options in
the current version of this software
\begin{enumerate}
\item \code{dcemri.lm}: Non-linear regression using non-linear least
  squares (Levenberg-Marquardt optimization),
\item \code{dcemri.bayes}: Bayesian estimation using Markov chain
  Monte Carlo (MCMC) \citep{sch-etal:TMI},
\item \code{dcemri.map}: Bayesian Maximum a Posteriori (MAP) 
  estimation using \code{optim}.
\end{enumerate}
Least-square estimates of the kinetic parameters $(\ktrans,\kep)$,
also $\vp$ for the extended Kety model, are provided in
\code{dcemri.lm} and maximum \emph{a posteriori} estimates in
\code{dcemri.map}.  The function \code{dcemri.bayes} provides the
posterior median as the summary statistic for $(\ktrans,\kep,\vp)$,
estimated via Markov chain Monte Carlo (MCMC).  All samples from the
joint posterior distribution may be saved using the option
\code{samples=TRUE}, allowing one to interrogate the posterior
probability density function (PDF) of all parameter estimates.  We
have found these useful in computing, for example, credible intervals.
Using the estimated kinetic parameters, the functions
\code{kineticModel} and \code{orton.exp.lm} may be used to compute the
estimated contrast agent concentration time curves for the given
parametric models.

For the Bayesian parametric estimation procedures
(\code{dcemri.bayes}, \code{dcemri.map}) hyperprior parameters must be
specified for the prior distributions on the kinetic parameters.
Following \citet{sch-etal:TMI}, we use Gaussian priors for
$\log(\ktrans)$ and $\log(\kep)$, a Beta prior for $\vp$, and a Gamma
prior on the variance of the observation errors.

As alternative to parametric modeling, \code{dcemri.spline} may be
used to de-convolve and de-noise the contrast agent concentration time
curves using an adaptive penalized Spline approach
\citep{sch-etal:TMI09}.  To provide estimates of the kinetic
parameters a response model is applied to the estimated response
curve; e.g., a single exponential in case of a \code{"weinmann"}
model.  The function \code{dcemri.spline} also uses a Bayesian
approach for estimation, where smoothing hyperpriors must be defined
and posterior PDFs are computed for all necessary parameters.

Using the simulated breast data from \cite{buc:uncertainty}, we
illustrate fitting the ``extended Kety'' model to the contrast agent
concentration time curves using the exponential model for the AIF.  We
use non-linear regression to fit the data on an under-sampled subset
(in time) of the simulated time curves.

<<buckley.kinetic>>=
xi <- seq(5, 300, by=5)
img <- array(t(breast$data)[,xi], c(13,1,1,60))
time <- buckley$time.min[xi]
aif <- buckley$input[xi]
mask <- array(TRUE, dim(img)[1:3])
aifparams <- orton.exp.lm(time, aif)
fit <- dcemri.lm(img, time, mask, model="orton.exp",
                 aif="user", user=aifparams)
@ 

The 13 unique simulated curves along with the fitted curves from the
compartmental model are displayed in Figure~\ref{fig:fitted-kinetic}.
There is decent agreement between the observed and fitted values,
except for Series~6 which exhibits rapid changes in contrast agent
concentration in the first minute of acquisition and, hence, cannot be
explained by the specified parametric model.

\begin{figure}[!htbp]
\begin{center}
<<figure9,fig=TRUE,echo=TRUE>>=
par(mfrow=c(4,4), mar=c(5,4,4,2)/1.25, mex=0.8)
for (x in 1:nrow(img)) {
  plot(time, img[x,1,1,], ylim=range(img), xlab="Time (minutes)",
       ylab="", main=paste("Series", x))
  kinparams <- with(fit, c(vp[x,1,1], ktrans[x,1,1], kep[x,1,1]))
  lines(time, model.orton.exp(time, aifparams[1:4], kinparams), 
        lwd=1.5, col=2)
}
@ 
\end{center}
\caption{Simulated signal intensity curves from Buckley (2002), for
  breast tissue, with the best parametric fit using an exponential
  model for the AIF and the ``extended Kety'' model.}
\label{fig:fitted-kinetic}
\end{figure}

\subsection[]{Statistical Inference}

No specific support is provided for hypothesis testing in
\pkg{dcemriS4}.  We recommend one uses built-in functions in
\proglang{R} to perform ANOVA (analysis of variance) or mixed-effects
models based on statistical summaries of the kinetic parameters over
the ROI on a per subject per visit basis.  An alternative to this
traditional approach is to analyze an entire study using a Bayesian
hierarchical model \citep{sch-etal:hierarchical}, currently under
development in the software project \pkg{PILFER}
(\url{http://pilfer.sourceforge.net}).  One may also question the
rationale for hypothesis testing in only one kinetic parameter.
Preliminary work has been performed in looking at the joint response
to treatment of both $\ktrans$ and $\kep$ in DCE-MRI
\citep{oco-etal:fPCA}.

\section[]{Diffusion Weighted Imaging}

Diffusion weighted imaging (DWI), also known as diffusion-weighted MRI
(DW-MRI), is a technique that measures the Brownian motion of water
molecules to estimate the diffusion characteristics of tissue \emph{in
vivo} \citep{mos-etal:diffusion,bux:introduction}.  Contrast is
generated when the diffusion of molecules in tissue prefer a specific
direction in three-dimensional space (anisotropic diffusion) relative
to any particular direction (isotropic diffusion).  Using the
Stejskal--Tanner equation
\begin{equation}
  \frac{S}{S_0} =
  \exp\left(-\gamma^2G^2\delta^2(\Delta-\delta/3)D\right) =
  \exp\left(-bD\right),
\end{equation}
one may solve for the unknown diffusion to obtain the \emph{apparent
diffusion coefficient} (ADC) $D$.  For completeness, $S_0$ is the
signal intensity without the diffusion weighting, $S$ is the signal
with the gradient applied, $\gamma$ is the gyromagnetic ratio, $G$ is
the strength of the gradient pulse, $\delta$ is the duration of the
gradient pulse and $\Delta$ is the time between the two pulses.  The
functions \code{ADC.fast} and \code{adc.lm} perform parameter
estimation using a similar interface to kinetic parameter estimation
previously introduced for DCE-MRI.

The diffusion of water without restrictions is approximately
$3.0{\times}10^{-3}\;\text{mm}^2/\text{s}$.  Once the ADC is estimated
in the tumor of interest at baseline, treatment response may be
assessed at subsequent time points.  The most appropriate timings
depend on both the type of tumor and treatment regime.  Observing an
decrease in diffusivity, via a decrease in the ADC values
post-treatment, may be a result of cell swelling after initial
chemotherapy or radiotherapy followed by an increase in diffusivity,
via an increase in the ADC values, from cell necrosis and lysis.  A
decrease in ADC values may be observed directly through tumor
apoptosis after treatment.

\section[]{Quantitative T2 Imaging}



\section[]{The RIDER Neuro MRI Data Repository}

The National Biomedical Imaging Archive (NBIA) is a searchable,
national repository integrating \emph{in vivo} cancer images with
clinical and genomic data.  The NBIA provides the scientific community
with public access to DICOM images, image markup, annotations, and
rich meta data (\url{http://cabig.nci.nih.gov/tools/NCIA}).

\subsection[]{Dynamic Contrast-Enhanced MRI}

Functions of the \pkg{oro.nifti} package are utilized to read the
signal intensity files, in Analyze or NIfTI format, obtained from the
MRI scanner (after conversion from DICOM).  In this example
pre-contrast multiple flip angle data are available for estimation of
contrast agent concentration.  We use \code{CA.fast} to estimate the
intrinsic relaxation rate $R_10$ and $m_0$ from \eqref{eqn:signal} and
the contrast agent concentration curve $C_t(t)$ from \eqref{eqn:conc}.
In order to save computation time and memory, we utilize a binary mask
with a very limited region-of-interest (ROI).

<<RIDER_Neuro_MRI+pre1,eval=TRUE,echo=TRUE>>=
perf <- paste("281949", "19040721", "perfusion", sep="_")
mask <- readANALYZE(paste(perf, "mask", sep="_"))
mask <- ifelse(mask > 0, TRUE, FALSE)
dynamic <- readNIfTI(perf)
TR <- 4.43 / 1000 # taken from CSV file
dangle <- 25      # taken from CSV file
fflip <- list.files(pattern="ax[0-9]")
fangles <- as.numeric(sub(".*ax([0-9]+).*", "\\1", fflip))
flip <- array(NA, c(dim(dynamic)[1:3], length(fangles)))
for (fa in 1:length(fangles)) {
  flip[,,,fa] <- readNIfTI(fflip[fa])
}
@ 
<<RIDER_Neuro_MRI+pre2,eval=FALSE,echo=TRUE>>=
ca <- CA.fast(dynamic, mask, dangle, flip, fangles, TR)
writeNIfTI(ca$M0, paste(perf, "m0", sep="_"))
writeNIfTI(ca$R10, paste(perf, "r10", sep="_"))
writeNIfTI(ca$conc, paste(perf, "gdconc", sep="_"))
@ 

After estimation of contrast agent concentration curves in each voxel
we want to fit a kinetic model to these curves.  Here, we use the
``extended'' Kety model, which includes a vascular compartment.  An
arterial input function has to be defined, here we use the standard
AIF, sum of two exponentials, with values taken from
\cite{tof-ker:measurement}.  A numeric optimization of the least
square fit using the Levenberg-Marquardt algorithm is provided by
\code{dcemri.lm()}:

<<RIDER_Neuro_MRI+lm0,eval=TRUE,echo=TRUE>>=
acqtimes <- str2time(unique(sort(scan("rawtimes.txt", quiet=TRUE))))$time
acqtimes <- (acqtimes - acqtimes[9]) / 60 # minutes
conc <- readNIfTI(paste(perf, "gdconc", sep="_"))
@ 
<<RIDER_Neuro_MRI+lm1,eval=FALSE,echo=TRUE>>=
fit.lm <- dcemri.lm(conc, acqtimes, mask, model="extended", 
                    aif="fritz.hansen", verbose=TRUE)
writeNIfTI(fit.lm$ktrans, paste(perf, "ktrans", sep="_"))
@ 
<<RIDER_Neuro_MRI+lm2,eval=FALSE,echo=FALSE>>=
writeNIfTI(fit.lm$kep, paste(perf, "kep", sep="_"))
writeNIfTI(fit.lm$vp, paste(perf, "vp", sep="_"))
writeNIfTI(fit.lm$ve, paste(perf, "ve", sep="_"))
writeNIfTI(fit.lm$sse, paste(perf, "sse", sep="_"))
rm(fit.lm)
@ 
<<RIDER_Neuro_MRI+lm3,eval=TRUE,echo=FALSE>>=
png(file=paste(paste(perf, "ktrans", sep="_"), "png", sep="."), 
    width=2*480, height=2*480)
@ 
<<RIDER_Neuro_MRI+lm4,eval=TRUE,echo=FALSE>>=
fit.lm <- list(ktrans=readNIfTI(paste(perf, "ktrans", sep="_")))
@ 
<<RIDER_Neuro_MRI+lm5,eval=TRUE,echo=TRUE>>=
overlay(dynamic, ifelse(fit.lm$ktrans < 0.1, fit.lm$ktrans, NA),
        w=11, zlim.x=c(32,512), zlim.y=c(0,0.1))
@ 
<<RIDER_Neuro_MRI+lm6,eval=TRUE,echo=FALSE,results=hide>>=
dev.off()
fit.lm$kep <- readNIfTI(paste(perf, "kep", sep="_"))
fit.lm$vp <- readNIfTI(paste(perf, "vp", sep="_"))
fit.lm$ve <- readNIfTI(paste(perf, "ve", sep="_"))
fit.lm$sse <- readNIfTI(paste(perf, "sse", sep="_"))
xx <- 41:220
yy <- 21:220
png(file=paste(paste(perf, "kep", sep="_"), "png", sep="."), 
    width=2*480, height=2*480)
overlay(as(dynamic[xx,yy,,], "nifti"), 
        ifelse(fit.lm$kep[xx,yy,] < 1.25, fit.lm$kep[xx,yy,], NA),
        z=7, w=11, zlim.x=c(32,512), zlim.y=c(0,1.25), plot.type="single")
dev.off()
png(file=paste(paste(perf, "vp", sep="_"), "png", sep="."), 
    width=2*480, height=2*480)
overlay(as(dynamic[xx,yy,,], "nifti"), 
        ifelse(fit.lm$vp[xx,yy,] < 0.3, fit.lm$vp[xx,yy,], NA),
        z=7, w=11, zlim.x=c(32,512), zlim.y=c(0,0.03), plot.type="single")
dev.off()
png(file=paste(paste(perf, "ve", sep="_"), "png", sep="."), 
    width=2*480, height=2*480)
overlay(as(dynamic[xx,yy,,], "nifti"), 
        ifelse(fit.lm$ve[xx,yy,] < 0.3, fit.lm$ve[xx,yy,], NA),
        z=7, w=11, zlim.x=c(32,512), zlim.y=c(0,0.3), plot.type="single")
dev.off()
png(file=paste(paste(perf, "sse", sep="_"), "png", sep="."), 
    width=2*480, height=2*480)
overlay(as(dynamic[xx,yy,,], "nifti"), 
        ifelse(fit.lm$sse[xx,yy,] < 0.05, fit.lm$sse[xx,yy,], NA),
        z=7, w=11, zlim.x=c(32,512), zlim.y=c(0,0.05), plot.type="single")
dev.off()
@ 

\begin{figure}[!htbp]
  \begin{center}
    \includegraphics*[width=0.9\textwidth]{281949_19040721_perfusion_ktrans.png}
  \end{center}
  \caption{Statistical images of $\ktrans$ maps for the RIDER Neuro
    MRI data (slice $z=7$).  Two potential tumors are visible, in the
    region-of-interest, by enhanced rims of high $\ktrans$ and central
    cores of low $\ktrans$.  The values of $\ktrans$ are
    $[0,0.1]\,\text{min}^{-1}$.}
  \label{fig:perfusion-ktrans}
\end{figure}

\begin{figure}[!htbp]
  \begin{center}
  \begin{tabular}{cc}
    $\kep$ & $v_e$\\
    \includegraphics*[width=0.4\textwidth]{281949_19040721_perfusion_kep.png} &
    \includegraphics*[width=0.4\textwidth]{281949_19040721_perfusion_ve.png}\\
    $v_p$ & $\text{SSE}$\\    
    \includegraphics*[width=0.4\textwidth]{281949_19040721_perfusion_vp.png} &
    \includegraphics*[width=0.4\textwidth]{281949_19040721_perfusion_sse.png}
    \end{tabular}
  \end{center}
  \caption{Statistical images, for slice $z=7$, of the RIDER Neuro MRI
    data using non-linear regression.  $\kep$ is the rate constant
    between EES and blood plasma (units are
    $[0,1.25]\,\text{min}^{-1}$).  $v_p$ is the vascular space
    fraction of plasma, units are $[0,30]\,\text{\%}$.  $v_e$ is the
    EES space fraction, units $[0,30]\,\text{\%}$.  SSE measures the
    quality of fit over the tumor region-of-interest, units are
    $[0,0.05]$.}
  \label{fig:perfusion-parametermaps}
\end{figure}
 
Fig.~\ref{fig:perfusion-ktrans} shows the estimated $\ktrans$
parameter maps for four slices.  Two rings of increased $\ktrans$
values can be identified from the parameter maps, which indicates the
presence of two tumors.  In both cases $\ktrans$ is nearly zero in the
center of both rings, indicating that no blood is supplied to the
probably necrotic core of the tumors.
Fig.~\ref{fig:perfusion-parametermaps} depicts parameter maps of slice
$z=7$ (bottom left in Fig.~\ref{fig:perfusion-ktrans}) for the other
kinetic parameters.  All maps strengthen the finding of two tumors
with necrotic cores.  For both tumors the fraction of extravascular
extracellular space (EES) $v_e$ is increased at the rim, which
indicates that normal tissue was destroyed here.  There is nearly no
perfusion in the tumors, i.e., low values of $\kep$ and $v_p$,
indicating necrotic cores.  Fig.~\ref{fig:perfusion-parametermaps}
shows sum of squared error SSE of the fit to the kinetic model. This
image can be used as quality check. Here, for example, the region of
interest covers cerebrospinal fluid, scull, and air, for all of which
the kinetic model is not appropriate and, hence, SSE is high. However,
across the healthy and the tumor tissue goodness of fit is nearly
invariant.

As all non-linear regression algorithms, the Levenberg-Marquardt
algorithm used in \code{dcemri.lm} is not guaranteed to converge and
is quite susceptible to noise.  More robust results can be achieved by
using biological prior information in a Bayesian framework
\citep{sch-etal:TMI}.  Two possibilities to gain parameter estimates
from a Bayesian model are implemented in \pkg{dcemriS4}. Whereas
\code{dcemri.bayes} uses a Markov Chain Monte Carlo (MCMC) algorithm
to explore the posterior PDF, \code{dcemri.map} uses numerical
optimization in order to maximize the posterior.

For neurological DCE-MRI data, $\ktrans$ values are typically roughly
in the range of $0-0.1$, and $\kep$ values are in the range of
$0-1.25$ (see above).  Here, we use a Gaussian distribution with mean
$\log(0.05)$ and variance $1$ on $\log(\ktrans)$, and mean $\log(0.7)$
and variance $1$ on $\log(\kep)$ as priors.  For $v_p$, we use
Beta-distribution with $a=1, b=19$, i.e., an a prior expected value of
0.5.

<<RiderNeuroMRI+map1,eval=FALSE,echo=TRUE>>=
fit.map <- dcemri.map(conc, acqtimes, mask, model="extended", 
                      aif="fritz.hansen", ab.ktrans=c(log(0.05),1),
                      ab.kep=c(log(0.7),1), ab.vp=c(1,19),
                      multicore=TRUE)
writeNIfTI(fit.map$ktrans, paste(perf, "ktrans", "map", sep="_"))
@ 
<<RiderNeuroMRI+map2,eval=TRUE,echo=FALSE,results=hide>>=
fit.map <- list(ktrans=readNIfTI(paste(perf, "ktrans", "map", sep="_")))
png(file=paste(paste(perf, "ktrans", "map", sep="_"), "png", sep="."), 
    width=2*480, height=2*480)
overlay(as(dynamic[xx,yy,,], "nifti"), 
        ifelse(fit.map$ktrans[xx,yy,] < 0.1, fit.map$ktrans[xx,yy,], NA),
        z=7, w=11, zlim.x=c(32,512), zlim.y=c(0,0.1), plot.type="single")
dev.off()
png(file=paste(paste(perf, "ktrans", "compare", sep="_"), "png", sep="."), 
    width=2*480, height=2*480)
plot(fit.lm$ktrans, fit.map$ktrans, xlim=c(0,0.3), ylim=c(0,0.3),
     xlab=expression(paste(K^{trans}, " (Levenberg-Marquardt)")), 
     ylab=expression(paste(K^{trans}, " (Maximum A Posteriori)")), 
     pch=19)
abline(0, 1, col="red", lwd=2)
dev.off()
@ 

\begin{figure}[!htbp]
\begin{center}
  $\ktrans$\\
  \includegraphics*[width=0.4\textwidth]{281949_19040721_perfusion_ktrans_map.png}
\end{center}
  \caption{Maximum a posteriori $\ktrans$ parameter map for slice
    $z=7$ of the RIDER DCE-MRI data.}
    \label{fig:perfusion-map}
\end{figure}

Fig.~\ref{fig:perfusion-map} depicts the $\ktrans$ parameter map for
the central tumor slice of the RIDER example (bottom left slice in
Fig.~\ref{fig:perfusion-ktrans}) gained by the maximum a posterior
estimator.  Estimated values are roughly the same as with the
Levenberg-Marquardt algorithm. However, the estimation is a little bit
more robust.  Here, by using biological prior information the number
of voxel where the algorithm did not converge is reduced by a fifth:

<<RiderNeuroMRI+map3,eval=TRUE,echo=TRUE>>=
x <- apply(mask, 1, sum) != 0
y <- apply(mask, 2, sum) != 0
print(c(sum(mask[x,y,]), 
        sum(is.na(fit.lm$ktrans[x,y,])),
        sum(is.na(fit.map$ktrans[x,y,]))))
@ 

Computation times for \code{dcemri.lm} and \code{dcemri.lm} are
roughly the same.  Using the MCMC algorithm provided by
\code{dcemri.bayes} is much more computational intensive.  However,
the MCMC algorithm explores the complete posterior PDF.  Hence, random
samples of the posteriori PDF are given as a result (with
\code{samples=TRUE}).  From this, statistics about the reliability of
the estimated parameters can be gained.  For example, here we use the
standard deviation of the $\ktrans$ parameter.

<<RiderNeuroMRI+Bayes0,eval=FALSE,echo=TRUE>>=
fit.bayes <- dcemri.bayes(conc, acqtimes, mask, model="extended", 
                          aif="fritz.hansen", ab.ktrans=c(log(0.05),1), 
                          ab.kep=c(log(0.7),1), ab.vp=c(1,19),
                          multicore=TRUE)
writeNIfTI(fit.bayes$ktrans, paste(perf, "ktrans", "bayes", sep="_"))
@ 
<<RiderNeuroMRI+Bayes1,eval=FALSE,echo=FALSE>>=
writeNIfTI(fit.bayes$ktranserror, paste(perf, "ktrans", "bayes", "sd", sep="_"))
writeNIfTI(fit.bayes$kep, paste(perf, "kep", "bayes", sep="_"))
writeNIfTI(fit.bayes$keperror, paste(perf, "kep","bayes", "sd", sep="_"))
rm(fit.bayes)
@ 
<<RiderNeuroMRI+Bayes2,eval=TRUE,echo=FALSE,results=hide>>=
fit.bayes <- list(ktrans=readNIfTI(paste(perf, "ktrans","bayes", sep="_")))
png(file=paste(paste(perf, "ktrans", "bayes", sep="_"), "png", sep="."), 
    width=2*480, height=2*480)
overlay(as(dynamic[xx,yy,,], "nifti"), 
        ifelse(fit.bayes$ktrans[xx,yy,] < 0.1, fit.bayes$ktrans[xx,yy,], NA), 
        z=7, w=11, zlim.x=c(32,512), zlim.y=c(0,0.1), plot.type="single")
dev.off()
fit.bayes$ktranserror <- readNIfTI(paste(perf, "ktrans","bayes","sd", sep="_"))
png(file=paste(paste(perf, "ktrans", "bayes", "sd", sep="_"), "png", sep="."), 
    width=2*480, height=2*480)
overlay(dynamic[xx,yy,,], 
        ifelse(fit.bayes$ktranserror[xx,yy,] < 0.0075, fit.bayes$ktranserror[xx,yy,], NA),
        z=7, w=11, zlim.x=c(32,512), zlim.y=c(0,0.0075), plot.type="single")
dev.off()
png(file=paste(paste(perf, "ktrans", "bayes", "cv", sep="_"), "png", sep="."), 
    width=2*480, height=2*480)
overlay(as(dynamic[xx,yy,,], "nifti"), 
        ifelse(fit.bayes$ktranserror[xx,yy,] / fit.bayes$ktrans[xx,yy,] < 0.2, 
               fit.bayes$ktranserror[xx,yy,] / fit.bayes$ktrans[xx,yy,], NA),
        z=7, w=11, zlim.x=c(32,512), zlim.y=c(0,0.2), plot.type="single")
dev.off()
@

\begin{figure}[!htbp]
  \begin{center}
    \begin{tabular}{cc}
      $\text{median}(\ktrans)$ & $\text{sd}(\ktrans)$\\ 
      \includegraphics*[width=0.4\textwidth]{281949_19040721_perfusion_ktrans_bayes.png} &
      \includegraphics*[width=0.4\textwidth]{281949_19040721_perfusion_ktrans_bayes_sd.png}\\
      $\text{sd}(\ktrans)/\text{median}(\ktrans)$\\
      \includegraphics*[width=0.4\textwidth]{281949_19040721_perfusion_ktrans_bayes_cv.png}
    \end{tabular}
  \end{center}
  \caption{Median posterior $\ktrans$ parameter map.  Map of standard
    deviation of $\ktrans$ posterior distribution.  Map of standard
    deviation divided by estimated $\ktrans$ value.}
  \label{fig:perfusion-bayes}
\end{figure}

Fig.~\ref{fig:perfusion-bayes} depicts the $\ktrans$ parameter map
estimated as the median of the marginal $\ktrans$ posterior
PDF. Please note, that in general the median posterior value is
different from the maximum a posterior estimator computed by
\code{dcemri.map}. However, $\ktrans$ values in
Fig.~\ref{fig:perfusion-bayes} are similar to those estimated by
\code{dcemri.lm} and \code{dcemri.map}.
Fig.~\ref{fig:perfusion-bayes} also shows the $\ktrans$ standard
deviation map and a map of standard deviation divided by estimated
$\ktrans$ values.  As can be seen from the maps, the standard
deviation of $\ktrans$ is increased in the area of increased
$\ktrans$, even after adjusting for the estimated $\ktrans$ value.
However, in general the standard deviation is quite low, below $0.1$,
in the area of the tumor.

As alternative to fit a kinetic model, \code{dcemri.spline} allows to
fit a smooth, non-parametric curve to the data.  Smoothness of the
curve and fit to the data are controlled by two Gamma priors: the
prior for the adaptive smoothness parameters (\code{ab.hyper}) and the
prior for the variance of the observation error
(\code{ab.tauepsilon}).  A method to compute the onset of contrast
agent concentration is also implemented in \code{dcemri.spline}.
Further details can be found in \cite{sch-etal:TMI09}.  The function
gives not only the fit to the data, but also the deconvolved response
function in each voxel.

<<RiderNeuroMRI+Spline,eval=FALSE,echo=TRUE>>=
mask.spline <- array(FALSE, dim(mask))
z <- 7
mask.spline[,,z] <- mask[,,z]
fit.spline <- dcemri.spline(conc[,,,-(1:8)], acqtimes[-(1:8)], mask.spline,
                            model="weinmann", aif="fritz.hansen", 
                            ab.tauepsilon=c(1/10,1/1000), 
                            ab.hyper=c(0.01,0.01), multicore=TRUE, 
                            nlr=TRUE)
writeNIfTI(fit.spline$ktrans, paste(perf, "ktrans","spline", sep="_"))
writeNIfTI(fit.spline$Fp, paste(perf, "Fp","spline", sep="_"))
@ 
<<RiderNeuroMRI+Spline2,eval=TRUE,echo=FALSE,results=hide>>=
fit.spline <- list(ktrans=readNIfTI(paste(perf, "ktrans","spline", sep="_")))
png(file=paste(paste(perf, "ktrans", "spline", sep="_"), "png", sep="."), 
    width=2*480, height=2*480)
overlay(as(dynamic[xx,yy,,], "nifti"), 
        ifelse(fit.spline$ktrans[xx,yy,] < 0.1, fit.spline$ktrans[xx,yy,], NA),
        z=7, w=11, zlim.x=c(32,512), zlim.y=c(0,0.1), plot.type="single")
dev.off()
png(file=paste(paste(perf, "Fp", "spline", sep="_"), "png", sep="."), 
    width=2*480, height=2*480)
fit.spline$Fp <- readNIfTI(paste(perf, "Fp","spline", sep="_"))
overlay(as(dynamic[xx,yy,,], "nifti"), 
        ifelse(fit.spline$Fp[xx,yy,] < 0.15, fit.spline$Fp[xx,yy,], NA),
        z=7, w=11, zlim.x=c(32,512), zlim.y=c(0,0.15), plot.type="single")
dev.off()
@

\begin{figure}[!htbp]
  \begin{center}
    \begin{tabular}{cc}
      $F_p$ & $\ktrans$ \\
      \includegraphics*[width=0.4\textwidth]{281949_19040721_perfusion_Fp_spline.png}&
      \includegraphics*[width=0.4\textwidth]{281949_19040721_perfusion_ktrans_spline.png}
    \end{tabular}
  \end{center}
  \caption{Left: $F_p$ parameter map computed as maximum of the
    response function after deconvolution using an adaptive Spline
    fit.  Right: $\ktrans$ parameter map estimated from a response
    model fit.}
  \label{fig:perfusion-spline}
\end{figure}

As a summary statistic the maximum of the response function can be
used. Fig.~\ref{fig:perfusion-spline} depicts the maximum response
function, i.e., the maximum perfusion $Fp$.  Alternatively, a response
model can be fitted to the response function (\code{nlr=TRUE}).
Please note that a sample of the posterior PDF is given for the
response function and, hence, a non-linear fit to the response model
is performed for each response function in the sample.  The
\code{dcemri.spline} function supports two models, the standard Kety
model and the adiabatic approximation of tissue homogeneity (AATH)
\citep{stl-lee:aath}.

Fig.~\ref{fig:perfusion-spline} depicts the maximum perfusion $F_p$
parameter map for the central tumor slice. Increased perfusion is
also visible in this map.  Fig.~\ref{fig:perfusion-spline} also shows
the median $\ktrans$ parameter map estimated from fitting a Kety
response model to the estimated response function.  Here, compared to
the results above, $\ktrans$ is slightly increased in top left area of
the region of interest due to the negligence of the vascular
compartment in the standard Kety model.

\pkg{dcemriS4} supports the \code{audit.trail} functionality of
\pkg{oro.nifti}.  Hence, from a parameter map given in NIfTI class, we
can follow back all steps from parameter estimation to raw signal

\small
<<AuditTrail,eval=TRUE,echo=TRUE>>=
print(audit.trail(fit$ktrans))
@ 
\normalsize

\subsection[]{Diffusion-Weighted MRI}



\subsection[]{Quantitative T2 Imaging}



\section[]{Conclusion}



\section*{Acknowledgments}

The authors would like to thank the National Biomedical Imaging
Archive, the National Cancer Institute, the National Institute of
Health and all institutions that have contributed medical imaging
data.  VS is supported by the LMU innovative project BioMed-S:
Analysis and Modelling of Complex Systems.

\bibliography{dcemri}

<<end,eval=FALSE,echo=FALSE>>=
options(prompt="R> ")
@ 

\end{document}

