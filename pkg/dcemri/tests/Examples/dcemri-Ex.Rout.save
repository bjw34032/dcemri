
R version 2.9.1 (2009-06-26)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### * <HEADER>
> ###
> attach(NULL, name = "CheckExEnv")
> assign("nameEx",
+        local({
+ 	   s <- "__{must remake R-ex/*.R}__"
+            function(new) {
+                if(!missing(new)) s <<- new else s
+            }
+        }),
+        pos = "CheckExEnv")
> ## Add some hooks to label plot pages for base and grid graphics
> assign("base_plot_hook",
+        function() {
+            pp <- par(c("mfg","mfcol","oma","mar"))
+            if(all(pp$mfg[1:2] == c(1, pp$mfcol[2]))) {
+                outer <- (oma4 <- pp$oma[4]) > 0; mar4 <- pp$mar[4]
+                mtext(sprintf("help(\"%s\")", nameEx()), side = 4,
+                      line = if(outer)max(1, oma4 - 1) else min(1, mar4 - 1),
+                outer = outer, adj = 1, cex = .8, col = "orchid", las=3)
+            }
+        },
+        pos = "CheckExEnv")
> assign("grid_plot_hook",
+        function() {
+            grid::pushViewport(grid::viewport(width=grid::unit(1, "npc") -
+                               grid::unit(1, "lines"), x=0, just="left"))
+            grid::grid.text(sprintf("help(\"%s\")", nameEx()),
+                            x=grid::unit(1, "npc") + grid::unit(0.5, "lines"),
+                            y=grid::unit(0.8, "npc"), rot=90,
+                            gp=grid::gpar(col="orchid"))
+        },
+        pos = "CheckExEnv")
> setHook("plot.new",     get("base_plot_hook", pos = "CheckExEnv"))
> setHook("persp",        get("base_plot_hook", pos = "CheckExEnv"))
> setHook("grid.newpage", get("grid_plot_hook", pos = "CheckExEnv"))
> assign("cleanEx",
+        function(env = .GlobalEnv) {
+ 	   rm(list = ls(envir = env, all.names = TRUE), envir = env)
+            RNGkind("default", "default")
+ 	   set.seed(1)
+    	   options(warn = 1)
+ 	   .CheckExEnv <- as.environment("CheckExEnv")
+ 	   delayedAssign("T", stop("T used instead of TRUE"),
+ 		  assign.env = .CheckExEnv)
+ 	   delayedAssign("F", stop("F used instead of FALSE"),
+ 		  assign.env = .CheckExEnv)
+ 	   sch <- search()
+ 	   newitems <- sch[! sch %in% .oldSearch]
+ 	   for(item in rev(newitems))
+                eval(substitute(detach(item), list(item=item)))
+ 	   missitems <- .oldSearch[! .oldSearch %in% sch]
+ 	   if(length(missitems))
+ 	       warning("items ", paste(missitems, collapse=", "),
+ 		       " have been removed from the search path")
+        },
+        pos = "CheckExEnv")
> assign("ptime", proc.time(), pos = "CheckExEnv")
> ## at least one package changes these via ps.options(), so do this
> ## before loading the package.
> ## Use postscript as incomplete files may be viewable, unlike PDF.
> ## Choose a size that is close to on-screen devices, fix paper
> grDevices::ps.options(width = 7, height = 7, paper = "a4", reset = TRUE)
> grDevices::postscript("dcemri-Ex.ps")
> 
> assign("par.postscript", graphics::par(no.readonly = TRUE), pos = "CheckExEnv")
> options(contrasts = c(unordered = "contr.treatment", ordered = "contr.poly"))
> options(warn = 1)
> library('dcemri')
Loading required package: splines
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> assign(".oldNS", loadedNamespaces(), pos = 'CheckExEnv')
> cleanEx(); nameEx("aif")
> ### * aif
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Arterial Input Functions
> ### Title: Arterial Input Functions
> ### Aliases: aif.orton.exp model.orton.exp orton.exp.lm
> ### Keywords: models
> 
> ### ** Examples
> 
> data(buckley)
> ## Generate AIF params using the orton.exp function from Buckley's AIF
> aifparams <- with(buckley, orton.exp.lm(time.min, input))
Loading required package: minpack.lm

This product includes software developed by the University of Chicago, as
Operator of Argonne National Laboratory.

See the LICENSE file distributed with the minpack.lm source code or
http://www.netlib.org/minpack/disclaimer for the full license.

> aifparams$D <- 1 
> print(aifparams)
$AB
[1] 37.15232

$muB
[1] 3.900687

$AG
[1] 1.518107

$muG
[1] -0.01041246

$info
[1] 1

$message
[1] "Relative error in the sum of squares is at most `ftol'."

$D
[1] 1

> time.min <- buckley$time.min[(1:60)*5]
> aoe <- aif.orton.exp(tt=time.min, AB=aifparams$AB, AG=aifparams$AG,
+                      muB=aifparams$muB, muG=aifparams$muG)
> with(buckley, plot(time.min, input, type="l"))
> points(time.min, aoe, col=2)
> legend(3, 4, c("Buckley's obtained AIF", "Our approximation"),
+        pch=c(0,1), col=c(1,2))
> cbind(time.min, buckley$input[(1:60)*5], aoe)[1:10,]
        time.min               aoe
 [1,] 0.06666667 0.912633 2.258346
 [2,] 0.15000000 2.807515 3.779167
 [3,] 0.23333333 4.915784 4.399696
 [4,] 0.31666667 5.942284 4.502597
 [5,] 0.40000000 4.981387 4.327481
 [6,] 0.48333333 4.016821 4.020833
 [7,] 0.56666667 3.326276 3.669246
 [8,] 0.65000000 2.873297 3.321380
 [9,] 0.73333333 2.580520 3.002351
[10,] 0.81666667 2.383784 2.723046
> 
> 
> 
> cleanEx(); nameEx("conv_fft")
> ### * conv_fft
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: conv.fft
> ### Title: Convolution of 3D Arrays using the Fourier Transform
> ### Aliases: conv.fft
> 
> 
> ### ** Examples
> 
> cube <- array(0, c(20,20,1))
> cube[9:12,9:12,1] <- 1
> tkernel <- array(0, c(20,20,1))
> tkernel[,,1] <- c(.5, 1, .5, rep(0,20-3)) 
> tcenter <- find.center(ifelse(tkernel > 0, TRUE, FALSE))
> out <- conv.fft(tkernel, cube, tcenter)
> out[8:13,8:13,1]  ## text output
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    2    2    2    2    2    2
[2,]    6    6    6    6    6    6
[3,]    8    8    8    8    8    8
[4,]    8    8    8    8    8    8
[5,]    6    6    6    6    6    6
[6,]    2    2    2    2    2    2
> 
> par(mfrow=c(2,2))  ## graphic output
> image(drop(tkernel), col=tim.colors(), main="Template")
> image(drop(cube), col=tim.colors(), main="Target")
> image(drop(out), col=tim.colors(), main="Output")
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx(); nameEx("dce_bayes")
> ### * dce_bayes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dcemri.bayes
> ### Title: Bayesian Methods for Pharmacokinetic Modeling of Dynamic
> ###   Contrast-Enhanced MRI Data
> ### Aliases: dcemri.bayes dcemri.bayes.single
> ### Keywords: models
> 
> ### ** Examples
> 
> data(buckley)
> img <- array(t(breast$data)[, (1:60)*5], c(13, 1, 1, 60))
> time.min <- buckley$time.min[(1:60)*5]
> mask <- array(rep(TRUE, 13), c(13,1,1))
> ## Generate AIF params using the orton.exp function from Buckley's AIF
> aifparams <- with(buckley, orton.exp.lm(time.min, input))
Loading required package: minpack.lm

This product includes software developed by the University of Chicago, as
Operator of Argonne National Laboratory.

See the LICENSE file distributed with the minpack.lm source code or
http://www.netlib.org/minpack/disclaimer for the full license.

> aifparams$D <- 1
> 
> fit.bayes <- dcemri.bayes(img, time.min, mask, aif="fritz.hansen")
  Deconstructing data...
  Estimating the kinetic parameters...
  Reconstructing results...
> fit.bayes.aif <- dcemri.bayes(img, time.min, mask, model="orton.exp",
+                               aif="user", user=aifparams)
  Deconstructing data...
  User-specified AIF parameters...
  Estimating the kinetic parameters...
  Reconstructing results...
> plot(breast$ktrans, fit.bayes$ktrans, xlim=c(0,0.75), ylim=c(0,0.75),
+      xlab="True Ktrans", ylab="Estimated Ktrans (Bayes)")
> points(breast$ktrans, fit.bayes.aif$ktrans, pch=2)
> legend(0.4, 0.2, pch=c(2,1), legend=c("Orton Exp (modelled)","Fritz-Hansen"))
> lines(c(-0.1,0.8), c(-0.1,0.8), lty=3, col="grey")
> 
> fit.lm <- dcemri.lm(img, time.min, mask, aif="fritz.hansen")
  Deconstructing data...
  Estimating the kinetic parameters...
  Reconstructing results...
> fit.lm.aif <- dcemri.lm(img, time.min, mask, model="orton.exp",
+                         aif="user", user=aifparams)
  Deconstructing data...
  User-specified AIF parameters...
  Estimating the kinetic parameters...
  Reconstructing results...
> plot(breast$ktrans, fit.bayes$ktrans, xlim=c(0,0.75), ylim=c(0,0.75),
+      xlab="True Ktrans", ylab="Estimated Ktrans")
> points(breast$ktrans, fit.bayes.aif$ktrans, pch=3)
> points(breast$ktrans, fit.lm$ktrans, pch=2)
> points(breast$ktrans, fit.lm.aif$ktrans, pch=4)
> legend(0.6, 0.2, legend=c("LM OE","Bayes OE","LM FH","Bayes FH"), pch=4:1)
> lines(c(-0.1,0.8), c(-0.1,0.8), lty=3, col="grey")
> cbind(breast$ktrans, fit.bayes$ktrans[,,1], fit.bayes.aif$ktrans[,,1],
+       fit.lm$ktrans[,,1], fit.lm.aif$ktrans[,,1])
             [,1]      [,2]      [,3]      [,4]       [,5]
 [1,] 0.145599052 0.3824899 0.5512117 0.3817055 0.55219723
 [2,] 0.218344559 0.5939641 0.5091477 0.5947946 0.50251826
 [3,] 0.250521815 0.6942147 0.5031745 0.6951414 0.48788004
 [4,] 0.268391926 0.7536643 0.5006711 0.7530098 0.48005240
 [5,] 0.279725126 0.7898156 0.4999030 0.7906145 0.47507417
 [6,] 0.009912791 0.5167961 0.0819829 0.5241687 0.09021363
 [7,] 0.146992146 0.4667778 0.4679768 0.4680230 0.47333664
 [8,] 0.328712966 0.8605617 0.5100411 0.8593230 0.49702009
 [9,] 0.387767110 0.9779298 0.5134993 0.9811911 0.50438823
[10,] 0.250521815 0.5531195 0.4577080 0.5521835 0.45779008
[11,] 0.250521815 0.6203333 0.4805927 0.6226405 0.47238197
[12,] 0.250521815 0.7678484 0.5254623 0.7692656 0.50504025
[13,] 0.250521815 0.8431270 0.5507654 0.8430926 0.52403588
> 
> 
> 
> cleanEx(); nameEx("dce_spline")
> ### * dce_spline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dcemri.spline
> ### Title: Bayesian P-Splines for Dynamic Contrasat-Enhanced MRI Data
> ### Aliases: dcemri.spline dcemri.spline.single
> ### Keywords: models
> 
> ### ** Examples
> 
> data(buckley)
> img <- array(t(breast$data)[,(1:60)*5], c(13,1,1,60))
> time.min <- buckley$time.min[(1:60)*5]
> mask <- array(rep(TRUE, 13), c(13,1,1))
> ## Generate AIF params using the orton.exp function from Buckley's AIF
> aifparams <- with(buckley, orton.exp.lm(time.min,input))
Loading required package: minpack.lm

This product includes software developed by the University of Chicago, as
Operator of Argonne National Laboratory.

See the LICENSE file distributed with the minpack.lm source code or
http://www.netlib.org/minpack/disclaimer for the full license.

> aifparams$D <- 1 
> pseudoobservedaif <- aif.orton.exp(tt=time.min, AB=aifparams$AB,
+                                    AG=aifparams$AG, muB=aifparams$muB,
+                                    muG=aifparams$muG)
> 
> fit.spline <- dcemri.spline(img, time.min, mask, aif="fritz.hansen", nlr=TRUE)
  Deconstructing data...
  Estimating the parameters...
  Reconstructing results...
> fit.spline.aif <- dcemri.spline(img, time.min, mask, aif="observed",
+                                 aif.observed=pseudoobservedaif, nlr=TRUE)
  Deconstructing data...
  Estimating the parameters...
  Reconstructing results...
> 
> plot(breast$ktrans, fit.spline$ktrans, xlim=c(0,0.75), ylim=c(0,0.75),
+      xlab="True Ktrans", ylab="Estimated Ktrans (Spline)")
> points(breast$ktrans, fit.spline.aif$ktrans, pch=2)
> legend(0.4, 0.2, pch=c(2,1), legend=c("Modelled AIF","Fritz Hansen"))
> lines(c(-0.1,0.8), c(-0.1,0.8), lty=3, col="grey")
> cbind(breast$ktrans, fit.spline$ktrans[,,1], fit.spline.aif$ktrans[,,1])
             [,1]      [,2]      [,3]
 [1,] 0.145599052 0.3732629 0.1537010
 [2,] 0.218344559 0.5734851 0.2447432
 [3,] 0.250521815 0.6701770 0.2923806
 [4,] 0.268391926 0.7264583 0.3221035
 [5,] 0.279725126 0.7639966 0.3428019
 [6,] 0.009912791 0.4269477 0.2683044
 [7,] 0.146992146 0.4772765 0.2058096
 [8,] 0.328712966 0.7979350 0.3529201
 [9,] 0.387767110 0.8881018 0.3958913
[10,] 0.250521815 0.5186052 0.2195530
[11,] 0.250521815 0.5943531 0.2558106
[12,] 0.250521815 0.7436347 0.3290409
[13,] 0.250521815 0.8143150 0.3634489
> 
> 
> 
> cleanEx(); nameEx("dcemri")
> ### * dcemri
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dcemri.lm
> ### Title: Pharmacokinetic Models for Dynamic Contrast-Enhanced MRI Data
> ### Aliases: dcemri.lm
> ### Keywords: models
> 
> ### ** Examples
> 
> data("buckley")
> #Set up breast data for dcemri
> img <- array(t(breast$data)[,(1:60)*5], c(13,1,1,60))
> time.min <- buckley$time.min[(1:60)*5]
> mask <- array(rep(TRUE, 13), c(13,1,1))
> #Generate AIF params using the orton.exp function from Buckley's AIF
> aifparams <- with(buckley, orton.exp.lm(time.min,input))
Loading required package: minpack.lm

This product includes software developed by the University of Chicago, as
Operator of Argonne National Laboratory.

See the LICENSE file distributed with the minpack.lm source code or
http://www.netlib.org/minpack/disclaimer for the full license.

> aifparams$D<-1
> fit <- dcemri.lm(img, time.min, mask, model="orton.exp", aif="user", user=aifparams)
  Deconstructing data...
  User-specified AIF parameters...
  Estimating the kinetic parameters...
  Reconstructing results...
> 
> plot(breast$ktrans, fit$ktrans, xlim=c(0,0.75), ylim=c(0,0.75), xlab="True Ktrans", ylab="Estimated Ktrans")
> lines(c(-0.1,0.8), c(-0.1,0.8), lty=3, col="grey")
> cbind(breast$ktrans, fit$ktrans[,,1])
             [,1]       [,2]
 [1,] 0.145599052 0.55219723
 [2,] 0.218344559 0.50251826
 [3,] 0.250521815 0.48788004
 [4,] 0.268391926 0.48005240
 [5,] 0.279725126 0.47507417
 [6,] 0.009912791 0.09021363
 [7,] 0.146992146 0.47333664
 [8,] 0.328712966 0.49702009
 [9,] 0.387767110 0.50438823
[10,] 0.250521815 0.45779008
[11,] 0.250521815 0.47238197
[12,] 0.250521815 0.50504025
[13,] 0.250521815 0.52403588
> 
> 
> 
> 
> cleanEx(); nameEx("dwi")
> ### * dwi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Apparent Diffusion Coefficient
> ### Title: Estimate the Apparent Diffusion Coefficient (ADC)
> ### Aliases: adc.lm ADC.fast
> ### Keywords: models
> 
> ### ** Examples
> 
> S0 <- 10
> b <- c(0,50,400,800)  # units?
> D <- 0.7e-3           # mm^2 / s (normal white matter)
> 
> ## Signal intensities based on the (simplified) Bloch-Torry equation
> dwi <- function(S0, b, D) {
+   S0 * exp(-b*D)
+ }
> 
> set.seed(1234)
> signal <- array(dwi(S0, b, D) + rnorm(length(b), sd=.15),
+                 c(rep(1,3), length(b)))
> ADC <- ADC.fast(signal, b, array(TRUE, rep(1,3)))
Loading required package: minpack.lm

This product includes software developed by the University of Chicago, as
Operator of Argonne National Laboratory.

See the LICENSE file distributed with the minpack.lm source code or
http://www.netlib.org/minpack/disclaimer for the full license.

> unlist(ADC) # text output
          S0            D 
9.9858999893 0.0007337532 
> 
> par(mfrow=c(1,1)) # graphical output
> plot(b, signal, xlab="b-value", ylab="Signal intensity")
> lines(seq(0,800,10), dwi(S0, seq(0,800,10), D), lwd=2, col=1)
> lines(seq(0,800,10), dwi(ADC$S0, seq(0,800,10), ADC$D), lwd=2, col=2)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx(); nameEx("find_center")
> ### * find_center
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: find.center
> ### Title: Find the Center of a Binary Mask
> ### Aliases: find.center
> ### Keywords: misc
> 
> ### ** Examples
> 
> M <- array(FALSE, rep(10,3))
> M[6:10,6:10,6:10] <- TRUE
> Mc <- find.center(M)
> print(Mc)
[1] 8 8 8
> 
> 
> 
> cleanEx(); nameEx("flipangle")
> ### * flipangle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Relaxivity
> ### Title: Estimate Intrinsic Tissue Relaxivity
> ### Aliases: R10.lm E10.lm R1.fast CA.fast CA.fast2
> ### Keywords: misc
> 
> ### ** Examples
> 
> ## Parameters for simulated data
> S0 <- 100
> TR <- 5 / 1000            # seconds
> T1 <- 1.5                 # seconds
> alpha <- seq(2,24,by=2)   # degrees
> 
> ## Signal intensities for spoiled gradient echo image
> gre <- function(S0, TR, T1, alpha) {
+   theta <- alpha * pi/180 # radians
+   S0 * (1 - exp(-TR/T1)) * sin(theta) / (1 - cos(theta) * exp(-TR/T1))
+ }
> set.seed(1234)
> signal <- array(gre(S0, TR, T1, alpha) + rnorm(length(alpha), sd=.15),
+                 c(rep(1,3), length(alpha)))
> 
> out <- R1.fast(signal, array(TRUE, rep(1,3)), alpha, TR)
Loading required package: minpack.lm

This product includes software developed by the University of Chicago, as
Operator of Argonne National Laboratory.

See the LICENSE file distributed with the minpack.lm source code or
http://www.netlib.org/minpack/disclaimer for the full license.

> unlist(out)
        M0        R10 
99.5197735  0.6534572 
> 
> par(mfrow=c(1,1))
> plot(alpha, signal, xlab="Flip angle", ylab="Signal intensity")
> lines(alpha, gre(S0, TR, T1, alpha), lwd=2, col=1)
> lines(alpha, gre(drop(out$M0), TR, 1/drop(out$R10), alpha), lwd=2, col=2)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx(); nameEx("hotmetal")
> ### * hotmetal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hotmetal
> ### Title: Hot Metal Color Table
> ### Aliases: hotmetal
> ### Keywords: aplot
> 
> ### ** Examples
> 
> hotmetal(10) 
 [1] "#010000" "#4C0000" "#960000" "#E00000" "#FF2C00" "#FF7600" "#FFC100"
 [8] "#FFFF12" "#FFFF81" "#FFFFF1"
> image(outer(1:20,1:20,"+"), col=hotmetal(75), main="hotmetal")
> 
> 
> 
> cleanEx(); nameEx("kineticmodel")
> ### * kineticmodel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kineticModel
> ### Title: Pharmacokinetic Models
> ### Aliases: kineticModel
> ### Keywords: models
> 
> ### ** Examples
> 
> data(buckley)
> img <- array(t(breast$data)[,(1:60)*5], c(13,1,1,60))
> time <- buckley$time.min[(1:60)*5]
> mask <- array(rep(TRUE, 13), c(13,1,1))
> fit.lm <- dcemri.lm(img, time, mask, aif="fritz.hansen")
Loading required package: minpack.lm

This product includes software developed by the University of Chicago, as
Operator of Argonne National Laboratory.

See the LICENSE file distributed with the minpack.lm source code or
http://www.netlib.org/minpack/disclaimer for the full license.

  Deconstructing data...
  Estimating the kinetic parameters...
  Reconstructing results...
> curve.lm <- kineticModel(time, list("ktrans"=fit.lm$ktrans[3],
+                          "kep"=fit.lm$kep[3], "vp"=fit.lm$vp[3]))
> ## Not run: curve.lm
> 
> plot(time, img[3,1,1,], xlab="time", ylab="conc")
> lines(time, curve.lm)
> 
> fit.bayes <- dcemri.bayes(img, time, mask, aif="fritz.hansen")
  Deconstructing data...
  Estimating the kinetic parameters...
  Reconstructing results...
> curve.bayes <- kineticModel(time, list("ktrans"=fit.bayes$ktrans[3],
+                             "kep"=fit.bayes$kep[3], "vp"=fit.bayes$vp[3]))
> lines(time, curve.bayes, col="blue")
> cbind(time, img[3,1,1,], curve.lm, curve.bayes)[20:30,]
          time           curve.lm curve.bayes
 [1,] 1.650000 0.775142 0.7662219   0.7662105
 [2,] 1.733333 0.778938 0.7701721   0.7702036
 [3,] 1.816667 0.782176 0.7737276   0.7738009
 [4,] 1.900000 0.784939 0.7769461   0.7770601
 [5,] 1.983333 0.787302 0.7798738   0.7800275
 [6,] 2.066667 0.789326 0.7825480   0.7827403
 [7,] 2.150000 0.791067 0.7849987   0.7852285
 [8,] 2.233333 0.792571 0.7872505   0.7875166
 [9,] 2.316667 0.793878 0.7893233   0.7896248
[10,] 2.400000 0.795021 0.7912340   0.7915696
[11,] 2.483333 0.796029 0.7929963   0.7933650
> 
> 
> 
> cleanEx(); nameEx("shift3D")
> ### * shift3D
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shift3D
> ### Title: Shift a 3D Array in One Dimension
> ### Aliases: shift3D
> 
> 
> ### ** Examples
> 
> cube <- array(0, rep(20,3))
> cube[9:12,9:12,9:12] <- 1
> cube.shift <- shift3D(cube, 5, type="AP")
> par(mfrow=c(1,2), mar=rep(0.5,4))
> image(cube[,,10], xlab="", ylab="", axes=FALSE)
> image(cube.shift[,,10], xlab="", ylab="", axes=FALSE)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx(); nameEx("tim_colors")
> ### * tim_colors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tim.colors
> ### Title: Tim's Useful Color Table
> ### Aliases: tim.colors
> ### Keywords: aplot
> 
> ### ** Examples
> 
> tim.colors(10) 
 [1] "#00008F" "#0000FF" "#0070FF" "#00DFFF" "#50FFAF" "#BFFF40" "#FFCF00"
 [8] "#FF6000" "#EF0000" "#800000"
> image(outer(1:20, 1:20, "+"), col=tim.colors(75), main="tim.colors")
> 
> 
> 
> cleanEx(); nameEx("write")
> ### * write
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Write Output as Analyze/NIfTI
> ### Title: Write Analyze/NIfTI Format Binary Image Files
> ### Aliases: write.analyze.img write.nifti.img
> ### Keywords: file
> 
> ### ** Examples
> 
> norm <- dnorm(seq(-5,5,length=32), sd=2)
> norm <- (norm-min(norm)) / max(norm-min(norm))
> img <- norm %o% norm %o% norm
> img <- round(img*255)
> img[17:32,,] <- 255 - img[17:32,,]
> X <- nrow(img)
> Y <- ncol(img)
> Z <- nsli(img)
> 
> ## NIfTI
> nhdr <- make.hdr(X, Y, Z, 1, "INT", "nifti")
> ## Not run: 
> ##D write.nifti.img("test-image-int16", nhdr, img, "int16")
> ##D ## These files should be viewable in, for example, FSLview.
> ##D ## Make sure you adjust the min/max values for proper visualization.
> ##D readdata <- read.img("test-image-int16.nii.gz")
> ##D 
> ##D par(mfrow=c(6,6), mar=rep(0,4))
> ##D for (z in 1:32)
> ##D   image(img[,,z], zlim=range(img), col=grey(0:255/255), xlab="",
> ##D ylab="", axes=FALSE)
> ##D 
> ##D par(mfrow=c(6,6), mar=rep(0,4))
> ##D for (z in 1:32)
> ##D   image(readdata[,,z,1], zlim=range(img), col=grey(0:255/255), xlab="",
> ##D ylab="", axes=FALSE)
> ##D 
> ##D par(mfrow=c(6,6), mar=rep(0,4))
> ##D for (z in 1:32)
> ##D   image(abs(readdata[,,z,1] - img[,,z]), zlim=range(img),
> ##D col=grey(0:255/255), xlab="", ylab="", axes=FALSE)
> ## End(Not run)
> 
> ## Loop through all possible data types
> datatypes <- c("uint8","int16","int32","float","double")
> equal <- list()
> for (x in 1:length(datatypes)) {
+   fname <- paste("test-image-",datatypes[x],sep="")
+   write.nifti.img( fname, nhdr, img, datatypes[x])
+   equal[[datatypes[x]]] <- all(read.img(paste(fname,".nii.gz",sep=""))[,,,1]==img)
+ }
Loading required package: bitops
> unlist(equal)
 uint8  int16  int32  float double 
  TRUE   TRUE   TRUE   TRUE   TRUE 
> 
> ## Analyze
> hdr <- make.hdr(X, Y, Z, 1, "int16")
> # Analyze datatypes are the same as the nifti.
> equal <- list()
> for (x in 1:length(datatypes)) {
+   fname <- paste("test-analyze-image-",datatypes[x],sep="")
+   write.analyze.img( fname, hdr, img, datatypes[x])
+   equal[[datatypes[x]]] <- all(read.img(paste(fname,"",sep=""))[,,,1]==img)
+ }
> unlist(equal)
 uint8  int16  int32  float double 
  TRUE   TRUE   TRUE   TRUE   TRUE 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  183.149 0.443 185.27 0.016 0.016 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
